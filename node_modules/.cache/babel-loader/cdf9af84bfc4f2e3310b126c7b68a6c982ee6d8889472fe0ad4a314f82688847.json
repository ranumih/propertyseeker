{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahamed Sabith\\\\OneDrive\\\\Documents\\\\ReactProjectCW\\\\propertyseeker\\\\src\\\\components\\\\Favourites.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState,useEffect} from 'react'; // Import React and useState for local state management\n\n// function Favorites({show, properties}) {\n//   const [favorites, setFavorites] = useState([]);\n//   const [showClearConfirmation, setShowClearConfirmation] = useState(false);\n\n// useEffect(() => {\n//   //Load favorites from local storage\n//   const savedFavorites = localStorage.getItem('favorites');\n//   if (savedFavorites) {\n//     setFavorites(JSON.parse(savedFavorites));\n//   }\n// }, []);\n\n// useEffect(() => {\n//   //Save favorites to local storage whenever it changes\n//   localStorage.setItem('favorites', JSON.stringify(favorites));\n// }, [favorites]); //runs everytime favorites change\n\n//   //Handles the drag over event to allow dropping an item\n//   const handleDragOver = (e) => {\n//     e.preventDefault(); // Prevent default behavior to allow drop\n//     const target = e.target;\n//     if (target.classList.contains('droppable')) {\n//       target.classList.add('active'); // Add active class to highlight the droppable area\n//     }\n//   };\n\n//   //Handles the drag leave event to remove the highlight from the droppable area\n//   const handleDragLeave = (e) => {\n//     const target = e.target;\n//     if (target.classList.contains('droppable')) {\n//       target.classList.remove('active'); // Remove active class when the dragged item leaves the area\n//     }\n//   };\n\n//   //Handles the drop event to add a property to favorites\n//   const handleDrop = (e) => {\n//     e.preventDefault(); // Prevent default behavior of the drop event\n//     const propertyId = parseInt(e.dataTransfer.getData('propertyId'), 10); // Retrieve the property ID from the drag event\n//     toggleFavorite(propertyId); // Toggle favorite status for the dropped property\n//   };\n\n//   // Function to toggle favorite status\n//   const toggleFavorite = (propertyId) => {\n//     setFavorites(prev => {\n//       if (prev.includes(propertyId)) {\n//         return prev.filter(id => id !== propertyId); // Remove from favorites\n//       }\n//       return [...prev, propertyId]; // Add to favorites\n//     });\n//   };\n\n//   // Formats the price into GBP currency format\n//   const formatPrice = (price) => {\n//     return new Intl.NumberFormat('en-GB', {\n//       style: 'currency',\n//       currency: 'GBP',\n//       maximumFractionDigits: 0 // No decimal points\n//     }).format(price); // Format the price as a currency string\n//   };\n\n//   const handleClearFavorites = () => {\n//     // Show confirmation before clearing favorites\n//     setShowClearConfirmation(true);\n//   };\n\n//   const clearFavorites = () => {\n//     console.log(\"helloo\");\n//     setFavorites([]);\n//     console.log(favorites + \"favourtes within favourties state\");\n//     localStorage.removeItem('favorites'); \n//   }\n\n//   const confirmClearFavorites = () => {\n//     // Clear favorites and close confirmation\n//     clearFavorites();\n//     setShowClearConfirmation(false);\n//   };\n\n//   const cancelClearFavorites = () => {\n//     // Cancel clearing favorites and close confirmation\n//     setShowClearConfirmation(false);\n//   };\n\n//   return (\n//     <div className={`favorites ${show ? 'open' : ''}`}>\n//       <h2>Favorite Properties</h2>\n\n//       {showClearConfirmation && (\n//         <div className=\"clear-confirmation\">\n//           <p>Are you sure you want to clear all favorites?</p>\n//           <button onClick={confirmClearFavorites}>Yes</button>\n//           <button onClick={cancelClearFavorites}>No</button>\n//         </div>\n//       )}\n\n//       <div\n//         className=\"droppable\"\n//         onDragOver={handleDragOver}\n//         onDragLeave={handleDragLeave}\n//         onDrop={handleDrop}\n//       >\n//         {properties.length === 0 ? (\n//           <p>Drag properties here to add to favorites</p>\n//         ) : (\n//           properties.map(property => (\n//             <div key={property.id} className=\"favorite-item\">\n//               <img\n//                 src={`${property.picture}`}\n//                 alt={property.title}\n//                 className=\"favorite-item-img\"\n//               />\n//               <div>\n//                 <h4 className='name-in-fav'>{property.title}</h4>\n//                 <p className='price-in-fav'>{formatPrice(property.price)}</p>\n//                 <button> View Details</button>\n//                 <button>Remove</button>\n//               </div>\n//             </div>\n//           ))\n//         )}\n//       </div>\n//       <button onClick={handleClearFavorites} className=\"clear-fav-btn\">Clear</button>\n//     </div>\n//   );\n// }\n\n// export default Favorites;\n\nimport React, { useState, useEffect } from 'react'; // Import React and useState for managing state\n\n// Favorites component manages the display of favorite properties and drag/drop support\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Favorites({\n  show,\n  properties,\n  onPropertySelect,\n  onToggleFavorite\n}) {\n  _s();\n  const [favorites, setFavorites] = useState([]);\n  const [showClearConfirmation, setShowClearConfirmation] = useState(false);\n\n  // Load favorites from local storage\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('favorites');\n    if (savedFavorites) {\n      setFavorites(JSON.parse(savedFavorites));\n    }\n  }, []);\n\n  // Save favorites to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n  }, [favorites]);\n\n  // Drag and drop functionality for favorites\n  const handleDragOver = e => {\n    e.preventDefault();\n    const target = e.target;\n    if (target.classList.contains('droppable')) {\n      target.classList.add('active');\n    }\n  };\n  const handleDragLeave = e => {\n    const target = e.target;\n    if (target.classList.contains('droppable')) {\n      target.classList.remove('active');\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const propertyId = parseInt(e.dataTransfer.getData('propertyId'), 10);\n    onToggleFavorite(propertyId); // Toggle favorite status on drop\n  };\n\n  // Toggle favorite status for a property\n  const toggleFavorite = propertyId => {\n    setFavorites(prev => {\n      if (prev.includes(propertyId)) {\n        return prev.filter(id => id !== propertyId); // Remove from favorites\n      }\n      return [...prev, propertyId]; // Add to favorites\n    });\n  };\n  const formatPrice = price => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP',\n      maximumFractionDigits: 0\n    }).format(price); // Format price in GBP\n  };\n  const handleClearFavorites = () => {\n    setShowClearConfirmation(true); // Show confirmation before clearing favorites\n  };\n  const clearFavorites = () => {\n    setFavorites([]);\n    localStorage.removeItem('favorites');\n  };\n  const confirmClearFavorites = () => {\n    clearFavorites();\n    setShowClearConfirmation(false); // Close confirmation\n  };\n  const cancelClearFavorites = () => {\n    setShowClearConfirmation(false); // Cancel clearing favorites\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `favorites ${show ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Favorite Properties\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), showClearConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clear-confirmation\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you want to clear all favorites?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: confirmClearFavorites,\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelClearFavorites,\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"droppable\",\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n      children: properties.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag properties here to add to favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this) : properties.map(property => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"favorite-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: property.picture,\n          alt: property.title,\n          className: \"favorite-item-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"name-in-fav\",\n            children: property.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"price-in-fav\",\n            children: formatPrice(property.price)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleFavorite(property.id),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }, this)]\n      }, property.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearFavorites,\n      className: \"clear-fav-btn\",\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s(Favorites, \"RiZpi9FM9NKXoYoH+NOnc/u7dEE=\");\n_c = Favorites;\nexport default Favorites;\nvar _c;\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Favorites","show","properties","onPropertySelect","onToggleFavorite","_s","favorites","setFavorites","showClearConfirmation","setShowClearConfirmation","savedFavorites","localStorage","getItem","JSON","parse","setItem","stringify","handleDragOver","e","preventDefault","target","classList","contains","add","handleDragLeave","remove","handleDrop","propertyId","parseInt","dataTransfer","getData","toggleFavorite","prev","includes","filter","id","formatPrice","price","Intl","NumberFormat","style","currency","maximumFractionDigits","format","handleClearFavorites","clearFavorites","removeItem","confirmClearFavorites","cancelClearFavorites","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDragOver","onDragLeave","onDrop","length","map","property","src","picture","alt","title","_c","$RefreshReg$"],"sources":["C:/Users/Ahamed Sabith/OneDrive/Documents/ReactProjectCW/propertyseeker/src/components/Favourites.jsx"],"sourcesContent":["// import React, { useState,useEffect} from 'react'; // Import React and useState for local state management\r\n\r\n// function Favorites({show, properties}) {\r\n//   const [favorites, setFavorites] = useState([]);\r\n//   const [showClearConfirmation, setShowClearConfirmation] = useState(false);\r\n\r\n// useEffect(() => {\r\n//   //Load favorites from local storage\r\n//   const savedFavorites = localStorage.getItem('favorites');\r\n//   if (savedFavorites) {\r\n//     setFavorites(JSON.parse(savedFavorites));\r\n//   }\r\n// }, []);\r\n\r\n// useEffect(() => {\r\n//   //Save favorites to local storage whenever it changes\r\n//   localStorage.setItem('favorites', JSON.stringify(favorites));\r\n// }, [favorites]); //runs everytime favorites change\r\n\r\n//   //Handles the drag over event to allow dropping an item\r\n//   const handleDragOver = (e) => {\r\n//     e.preventDefault(); // Prevent default behavior to allow drop\r\n//     const target = e.target;\r\n//     if (target.classList.contains('droppable')) {\r\n//       target.classList.add('active'); // Add active class to highlight the droppable area\r\n//     }\r\n//   };\r\n\r\n//   //Handles the drag leave event to remove the highlight from the droppable area\r\n//   const handleDragLeave = (e) => {\r\n//     const target = e.target;\r\n//     if (target.classList.contains('droppable')) {\r\n//       target.classList.remove('active'); // Remove active class when the dragged item leaves the area\r\n//     }\r\n//   };\r\n\r\n//   //Handles the drop event to add a property to favorites\r\n//   const handleDrop = (e) => {\r\n//     e.preventDefault(); // Prevent default behavior of the drop event\r\n//     const propertyId = parseInt(e.dataTransfer.getData('propertyId'), 10); // Retrieve the property ID from the drag event\r\n//     toggleFavorite(propertyId); // Toggle favorite status for the dropped property\r\n//   };\r\n\r\n//   // Function to toggle favorite status\r\n//   const toggleFavorite = (propertyId) => {\r\n//     setFavorites(prev => {\r\n//       if (prev.includes(propertyId)) {\r\n//         return prev.filter(id => id !== propertyId); // Remove from favorites\r\n//       }\r\n//       return [...prev, propertyId]; // Add to favorites\r\n//     });\r\n//   };\r\n\r\n//   // Formats the price into GBP currency format\r\n//   const formatPrice = (price) => {\r\n//     return new Intl.NumberFormat('en-GB', {\r\n//       style: 'currency',\r\n//       currency: 'GBP',\r\n//       maximumFractionDigits: 0 // No decimal points\r\n//     }).format(price); // Format the price as a currency string\r\n//   };\r\n\r\n//   const handleClearFavorites = () => {\r\n//     // Show confirmation before clearing favorites\r\n//     setShowClearConfirmation(true);\r\n//   };\r\n\r\n//   const clearFavorites = () => {\r\n//     console.log(\"helloo\");\r\n//     setFavorites([]);\r\n//     console.log(favorites + \"favourtes within favourties state\");\r\n//     localStorage.removeItem('favorites'); \r\n//   }\r\n\r\n//   const confirmClearFavorites = () => {\r\n//     // Clear favorites and close confirmation\r\n//     clearFavorites();\r\n//     setShowClearConfirmation(false);\r\n//   };\r\n\r\n//   const cancelClearFavorites = () => {\r\n//     // Cancel clearing favorites and close confirmation\r\n//     setShowClearConfirmation(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={`favorites ${show ? 'open' : ''}`}>\r\n//       <h2>Favorite Properties</h2>\r\n      \r\n//       {showClearConfirmation && (\r\n//         <div className=\"clear-confirmation\">\r\n//           <p>Are you sure you want to clear all favorites?</p>\r\n//           <button onClick={confirmClearFavorites}>Yes</button>\r\n//           <button onClick={cancelClearFavorites}>No</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div\r\n//         className=\"droppable\"\r\n//         onDragOver={handleDragOver}\r\n//         onDragLeave={handleDragLeave}\r\n//         onDrop={handleDrop}\r\n//       >\r\n//         {properties.length === 0 ? (\r\n//           <p>Drag properties here to add to favorites</p>\r\n//         ) : (\r\n//           properties.map(property => (\r\n//             <div key={property.id} className=\"favorite-item\">\r\n//               <img\r\n//                 src={`${property.picture}`}\r\n//                 alt={property.title}\r\n//                 className=\"favorite-item-img\"\r\n//               />\r\n//               <div>\r\n//                 <h4 className='name-in-fav'>{property.title}</h4>\r\n//                 <p className='price-in-fav'>{formatPrice(property.price)}</p>\r\n//                 <button> View Details</button>\r\n//                 <button>Remove</button>\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n//       <button onClick={handleClearFavorites} className=\"clear-fav-btn\">Clear</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Favorites;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react'; // Import React and useState for managing state\r\n\r\n// Favorites component manages the display of favorite properties and drag/drop support\r\nfunction Favorites({ show, properties, onPropertySelect, onToggleFavorite }) {\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [showClearConfirmation, setShowClearConfirmation] = useState(false);\r\n\r\n  // Load favorites from local storage\r\n  useEffect(() => {\r\n    const savedFavorites = localStorage.getItem('favorites');\r\n    if (savedFavorites) {\r\n      setFavorites(JSON.parse(savedFavorites));\r\n    }\r\n  }, []);\r\n\r\n  // Save favorites to local storage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n  }, [favorites]);\r\n\r\n  // Drag and drop functionality for favorites\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    const target = e.target;\r\n    if (target.classList.contains('droppable')) {\r\n      target.classList.add('active');\r\n    }\r\n  };\r\n\r\n  const handleDragLeave = (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains('droppable')) {\r\n      target.classList.remove('active');\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const propertyId = parseInt(e.dataTransfer.getData('propertyId'), 10);\r\n    onToggleFavorite(propertyId); // Toggle favorite status on drop\r\n  };\r\n\r\n  // Toggle favorite status for a property\r\n  const toggleFavorite = (propertyId) => {\r\n    setFavorites((prev) => {\r\n      if (prev.includes(propertyId)) {\r\n        return prev.filter(id => id !== propertyId); // Remove from favorites\r\n      }\r\n      return [...prev, propertyId]; // Add to favorites\r\n    });\r\n  };\r\n\r\n  const formatPrice = (price) => {\r\n    return new Intl.NumberFormat('en-GB', {\r\n      style: 'currency',\r\n      currency: 'GBP',\r\n      maximumFractionDigits: 0\r\n    }).format(price); // Format price in GBP\r\n  };\r\n\r\n  const handleClearFavorites = () => {\r\n    setShowClearConfirmation(true); // Show confirmation before clearing favorites\r\n  };\r\n\r\n  const clearFavorites = () => {\r\n    setFavorites([]);\r\n    localStorage.removeItem('favorites');\r\n  };\r\n\r\n  const confirmClearFavorites = () => {\r\n    clearFavorites();\r\n    setShowClearConfirmation(false); // Close confirmation\r\n  };\r\n\r\n  const cancelClearFavorites = () => {\r\n    setShowClearConfirmation(false); // Cancel clearing favorites\r\n  };\r\n\r\n  return (\r\n    <div className={`favorites ${show ? 'open' : ''}`}>\r\n      <h2>Favorite Properties</h2>\r\n      {showClearConfirmation && (\r\n        <div className=\"clear-confirmation\">\r\n          <p>Are you sure you want to clear all favorites?</p>\r\n          <button onClick={confirmClearFavorites}>Yes</button>\r\n          <button onClick={cancelClearFavorites}>No</button>\r\n        </div>\r\n      )}\r\n      <div\r\n        className=\"droppable\"\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        {properties.length === 0 ? (\r\n          <p>Drag properties here to add to favorites</p>\r\n        ) : (\r\n          properties.map((property) => (\r\n            <div key={property.id} className=\"favorite-item\">\r\n              <img\r\n                src={property.picture}\r\n                alt={property.title}\r\n                className=\"favorite-item-img\"\r\n              />\r\n              <div>\r\n                <h4 className='name-in-fav'>{property.title}</h4>\r\n                <p className='price-in-fav'>{formatPrice(property.price)}</p>\r\n                <button>View Details</button>\r\n                <button onClick={() => toggleFavorite(property.id)}>Remove</button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <button onClick={handleClearFavorites} className=\"clear-fav-btn\">Clear</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,SAASA,CAAC;EAAEC,IAAI;EAAEC,UAAU;EAAEC,gBAAgB;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EAC3E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEzE;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAIF,cAAc,EAAE;MAClBH,YAAY,CAACM,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAb,SAAS,CAAC,MAAM;IACdc,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACG,SAAS,CAACV,SAAS,CAAC,CAAC;EAC9D,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}